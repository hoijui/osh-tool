#!/usr/bin/env bash

# SPDX-FileCopyrightText: 2021-2023 Robin Vobruba <hoijui.quaero@gmail.com>
#
# SPDX-License-Identifier: Unlicense

# Exit immediately on each error and unset variable;
# see: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail
#set -Eeu

script_dir=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
# shellcheck source=./env
source "$script_dir/env"

if [ -z "$(find "$proj_dir" -mindepth 1 -maxdepth 1 -name '*.nimble')" ]
then
	>&2 echo "ERROR: please run this script from the project root directory (containing the .nimble file)!"
	exit 1
fi

function version() {
	git describe \
		--tags \
		--dirty \
		--broken \
		--always \
		--long \
		--candidates=99 \
		--first-parent
}

function print_help() {

	echo "Run all we want to be done in our CI."
	echo
	echo "Usage:"
	echo "         $(basename "$0") [OPTIONS]"
	echo "Options:"
	echo "          -h, --help                  Show this help message"=
	echo "          -s, --install-requirements  Install whatever this script needs to run (works only on Debian/Ubuntu)"
}

# read command-line args
POSITIONAL=()
while [[ $# -gt 0 ]]
do
	arg="$1"
	shift # past argument

	case "$arg" in
		-h|--help)
			print_help
			exit 0
			;;
		-s|--install-requirements)
			"$script_dir/install_requirements" --fetch
			exit 0
			;;
		*) # non-/unknown option
			POSITIONAL+=("$arg") # save it in an array for later
			;;
	esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

if ! [ -f "$nim_win_dir/bin/libcrypto-1_1.dll" ]
then
	>&2 echo "ERROR: Missing windows nim. Please download it (to the build directory) with '$0 --install-requirements'."
	exit 1
fi

echo
echo "Compiling the software for Linux ..."
"$script_dir/build"

echo
echo "Cross-compiling the software for Windows 64 ..."
"$script_dir/build" --windows

bin_win="$(find "$build_dir" -mindepth 1 -maxdepth 1 -type f -name '*.exe' -printf '%P\n')"
bin_lin="${bin_win%.exe}"

echo
echo "State after building:"
find "$build_dir"

echo
echo "Moving the binaries to the package dir '$package_dir' ..."
rm -Rf "$package_dir"
mkdir -p "$package_dir"
mkdir "$package_dir/linux64"
mkdir "$package_dir/win64"
cp "$build_dir/$bin_lin" "$package_dir/linux64/"
cp "$build_dir/$bin_win" "$package_dir/win64/"
cp "$nim_win_dir/bin/"{libcrypto-1_1,libcrypto-1_1-x64,libssl-1_1,libssl-1_1-x64,pcre64}.dll "$package_dir/win64/"

echo
echo "Create static documentation ..."
{
	echo '---'
	echo "title: $bin_lin - List of checks"
	echo '---'
	echo
	"$build_dir/$bin_lin" --list-checks --quiet
} > "$package_dir/checks.md"
{
	echo '---'
	echo "title: $bin_lin - "'Output of `'"$bin_lin"' --help`'
	echo '---'
	echo
	echo '```'
	"$build_dir/$bin_lin" --help
	echo '```'
} > "$package_dir/help.md"
css="https://fonts.googleapis.com/css?family=Rock+Salt"
echo '
tbody tr:nth-child(odd) {
	background-color: #dddddd;
}

tbody tr:nth-child(even) {
	background-color: #cccccc;
}

table {
	background-color: #dddddd;
}
' > "$package_dir/table.css"
for md in "$package_dir/"*.md
do
	html="${md%.md}.html"
	pandoc -s --css "$css" --css "table.css" -o "$html" "$md"
done

echo
echo "State after package preparation:"
find "$package_dir"

cd "$package_dir"

echo
echo "Creating the binary archives ..."
version="$(version)"
pkg_lin="${bin_lin}-${version}-x86_64-linux"
pkg_win="${bin_lin}-${version}-x86_64-windows"
mv linux64 "$pkg_lin"
mv win64 "$pkg_win"
zip -r "$pkg_lin".zip "$pkg_lin"
zip -r "$pkg_win".zip "$pkg_win"

img_src_linux="https://icons.iconarchive.com/icons/dakirby309/simply-styled/128/OS-Linux-icon.png"
img_src_windows="https://icons.iconarchive.com/icons/tatice/operating-systems/256/Windows-icon.png"
img_src_archive="https://icons.iconarchive.com/icons/zerode/plump/128/Folder-Archive-zip-icon.png"

echo
echo "Creating HTML ('index.html') that links to all the files generated above ..."
{
	echo "<html>"
	echo '<head>'
	echo '<title>osh-tool - Downloads</title>'
	echo '</head>'
	echo "<body>"
	echo 'Downloadable, generated files from the <a href="https://github.com/hoijui/osh-tool">osh-tool repo</a>.'
	echo "<ul>"
	# Create HTML links to all the archive files
	for file in *.zip
	do
		img_src=''
		if [ "$file" = "${pkg_lin}.zip" ]
		then
			img_src="$img_src_linux"
		elif [ "$file" = "${pkg_win}.zip" ]
		then
			img_src="$img_src_windows"
		else
			img_src="$img_src_archive"
		fi
		echo "<li><img alt=\"os_icon\" width=\"64\" src=\"$img_src\"/><a href=\"$file\">$file</a></li>"
	done
	find ./*.{md,html} | sed -e 's|^\./||' | sort | while read -r file
	do
		if [ "$file" = "index.html" ]
		then
			continue
		fi
		echo "<li><a href=\"$file\">$file</a></li>"
	done
	echo "</ul>"
	echo "</body>"
	echo "</html>"
} >> index.html

cd "$proj_dir"
echo "done."

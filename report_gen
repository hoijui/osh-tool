#!/usr/bin/env bash
# SPDX-FileCopyrightText: 2022 Robin Vobruba <hoijui.quaero@gmail.com>
#
# SPDX-License-Identifier: AGPL-3.0-or-later

# See the output of "$0 -h" for details.

# Exit immediately on each error and unset variable;
# see: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail
#set -Eeu

APP_NAME="OSH-Tool HTML Report Creator"
SCRIPT_NAME="$(basename "$0")"
SCRIPT_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
OUT_DIR_DEFAULT="public"
OUT_FILE_NAME_MD="osh-report.md"
OUT_FILE_NAME_JSON="osh-report.json"
OUT_FILE_NAME_HTML="osh-report.html"
BADGE_FILE_NAME_REPORT="osh-badge-report.svg"
BADGE_FILE_NAME_OPENNESS="osh-badge-openness.svg"

# parameters
repo="$(pwd)"
title=""
output_dir="$OUT_DIR_DEFAULT"
force=false

function print_help() {

	echo -e ""
	echo -e "$APP_NAME - Executes the OSH CLI tool"
	echo -e "on a local (git) repo, and generates an HTML report"
	echo -e "from the results."
	echo -e "By default, all output goes into a single folder: 'public'"
	echo -e ""
	echo -e "Usage:"
	echo -e "\t$SCRIPT_NAME [OPTION...]"
	echo -e "Options:"
	echo -e "\t-C, --repo [PATH]"
	echo -e "\t\tDefines the path to the repo to check (default: '.')"
	echo -e "\t-o, --output-dir [PATH]"
	echo -e "\t\tWhere to write the resulting HTML, Markdown and JSON reports to"
	echo -e "\t\t(default: '$OUT_DIR_DEFAULT')"
	echo -e "\t-f, --force"
	echo -e "\t\tForces overwriting index.html"
	echo -e "\t-h, --help"
	echo -e "\t\tPrint this usage help and exit"
	echo -e ""
}

# Process command line arguments
while [[ $# -gt 0 ]]
do
	arg="$1"
	shift # $2 -> $1, $3 -> $2, ...

	case "$arg" in
		-C|--repo)
			repo="$1"
			shift
			;;
		-o|--output-dir)
			output_dir="$1"
			shift
			;;
		-f|--force)
			force=true
			;;
		-h|--help)
			print_help
			exit 0
			;;
		*) # non-/unknown option
			>&2 echo "Unknown flag: '$arg'"
			exit 1
			;;
	esac
done

output_md="$output_dir/$OUT_FILE_NAME_MD"
output_json="$output_dir/$OUT_FILE_NAME_JSON"
output_html="$output_dir/$OUT_FILE_NAME_HTML"
badge_file_report="$output_dir/$BADGE_FILE_NAME_REPORT"
badge_file_openness="$output_dir/$BADGE_FILE_NAME_OPENNESS"

if ! [ -d "$repo" ]
then
	>&2 echo "ERROR: Not an existing repository: '$repo'"
	exit 1
fi

mkdir -p "$output_dir"

# Creates the OSH report as Markdown table
osh \
	-C "$repo" \
	check \
	--force \
	--report-md-table "$output_md" \
	--report-json "$output_json"

# Prettify JSON
jq < "$output_json" > "${output_json}_TMP"
mv "${output_json}_TMP" "$output_json"

stat_openness="$(jq -r '.stats."openness"' < "$output_json")"
stat_openness_p="$(bc <<< "scale=2; $stat_openness*100/1")"
stat_openness_p_int="$(bc <<< "scale=0; $stat_openness_p/1")"

if [ "$stat_openness_p_int" -gt 90 ]
then
	openness_color=green
elif [ "$stat_openness_p_int" -gt 50 ]
then
	openness_color=yellow
else
	openness_color=red
fi

rm -f "$badge_file_report" "$badge_file_openness"
wget "https://img.shields.io/badge/OSH-Report-$openness_color" \
	--quiet \
	-O "$badge_file_report"
wget "https://img.shields.io/badge/OSH%20Openness-$stat_openness_p%-$openness_color" \
	--quiet \
	-O "$badge_file_openness"

function projvar_get() {
	local key
	local value
	key="$1"
	value="$(jq -r '.prelude.projVars["'"$key"'"]' < "$output_json")"
	echo "$value"
	if [ "$value" == "null" ]
	then
		return 1
	else
		return 0
	fi
}

function projvar_get_or_default() {
	local key
	local default
	local value
	local ret
	key="$1"
	default="$2"
	value="$(projvar_get "$key")"
	ret=$?
	if [ $ret -eq 0 ]
	then
		echo "$value"
	else
		echo "$default"
	fi
	return $ret
}

if [ -z "$title" ]
then
	proj_name="$(projvar_get_or_default 'NAME' 'Project name N/A')"
	proj_repo_web_url="$(projvar_get_or_default 'REPO_WEB_URL' '???')"
	title="[$proj_name]($proj_repo_web_url) - [OSH](https://en.wikipedia.org/wiki/Open-source_hardware) quality report"
fi
subtitle="Produced by the [\`osh\`-tool](https://gitlab.com/OSEGermany/osh-tool/)" # TODO Get the URL from a part in the JSON report as well (needs to be put there first)

# Prepends meta-data to Markdown report
prefix_file="/tmp/report_gen-prefix-$RANDOM"
tmp_file="/tmp/report_gen-tmp-$RANDOM"
{
	echo "---"
	echo "title: '$title'"
	echo "subtitle: '$subtitle'"
	echo "---"
	echo
	echo "![OSH Report]($BADGE_FILE_NAME_REPORT)"
	echo "![OSH Openness]($BADGE_FILE_NAME_OPENNESS)"
	echo
	echo "## This report in different formats"
	echo
	echo "* [Markdown]($OUT_FILE_NAME_MD)"
	echo "* [HTML]($OUT_FILE_NAME_HTML)"
	echo "* [JSON]($OUT_FILE_NAME_JSON)"
	echo
} >> "$prefix_file"
cat "$prefix_file" "$output_md" > "$tmp_file"
mv "$tmp_file" "$output_md"
echo "INFO Written Markdown report file '$output_md'."
rm "$prefix_file"

# Generates HTML report
cwd="$PWD"
cd "$output_dir"
pandoc \
	-t html \
	-o "$OUT_FILE_NAME_HTML" \
	--standalone \
	--self-contained \
	--css="$SCRIPT_DIR/report_gen_additional.css" \
	-M document-css=true \
	"$OUT_FILE_NAME_MD"
cd "$cwd"
echo "INFO Written HTML report file '$output_html'."

# Generate an index.html if none exists yet
index_file="$output_dir/index.html"
if ! [ -f "$index_file" ] || $force
then
	echo '<!DOCTYPE html>
<html>
   <head>
      <title>Redirecting to OSH report ...</title>
      <meta http-equiv="refresh" content="1; url = osh-report.html" />
   </head>
   <body>
      <p>If you are not redirected automatically,
      click on <a href="osh-report.html">osh-report.html</a>.</p>
   </body>
</html>' > "$index_file"
	echo "INFO Written index file '$index_file'."
else
	>&2 printf 'WARN Skipped writing index file "%s",\n     because it already exists and --force was not given.\n' \
		"$index_file"
fi

#!/usr/bin/env bash
# SPDX-FileCopyrightText: 2022 Robin Vobruba <hoijui.quaero@gmail.com>
#
# SPDX-License-Identifier: AGPL-3.0-or-later

# See the output of "$0 -h" for details.

# Exit immediately on each error and unset variable;
# see: https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail
#set -Eeu

APP_NAME="OSH-Tool HTML Report Creator"
SCRIPT_NAME="$(basename "$0")"
SCRIPT_DIR=$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")
OUT_DIR_DEFAULT="public"
OUTPUT_FILE_MD_DEFAULT="$OUT_DIR_DEFAULT/osh-report.md"
OUTPUT_FILE_JSON_DEFAULT="$OUT_DIR_DEFAULT/osh-report.json"
OUTPUT_FILE_HTML_DEFAULT="$OUT_DIR_DEFAULT/osh-report.html"
OUTPUT_FILE_PROJVAR_DEFAULT="$OUT_DIR_DEFAULT/projvar.env"

# parameters
repo="$(pwd)"
title="${TODO:-}"
echo_projvar=false
output_md="$OUTPUT_FILE_MD_DEFAULT"
output_json="$OUTPUT_FILE_JSON_DEFAULT"
output_html="$OUTPUT_FILE_HTML_DEFAULT"
output_projvar="$OUTPUT_FILE_PROJVAR_DEFAULT"
badge_file_report="$OUT_DIR_DEFAULT/osh-badge-report.svg"
badge_file_openness="$OUT_DIR_DEFAULT/osh-badge-openness.svg"

force=false

function print_help() {

	echo -e ""
	echo -e "$APP_NAME - Executes the OSH CLI tool"
	echo -e "on a local (git) repo, and generates an HTML report"
	echo -e "from the results."
	echo -e "By default, all output goes into a single folder: 'public'"
	echo -e ""
	echo -e "Usage:"
	echo -e "\t$SCRIPT_NAME [OPTION...]"
	echo -e "Options:"
	echo -e "\t-C, --repo [PATH]"
	echo -e "\t\tDefines the path to the repo to check (default: '.')"
	echo -e "\t-o, --output-html"
	echo -e "\t\tWhere to write the resulting HTML report to"
	echo -e "\t\t(default: '$OUTPUT_FILE_HTML_DEFAULT')"
	echo -e "\t    --output-md"
	echo -e "\t\tWhere to write the resulting Markdown report to"
	echo -e "\t\t(default: '$OUTPUT_FILE_MD_DEFAULT')"
	echo -e "\t    --output-json"
	echo -e "\t\tWhere to write the resulting JSON report to"
	echo -e "\t\t(default: '$OUTPUT_FILE_JSON_DEFAULT')"
	echo -e "\t-f, --force"
	echo -e "\t\tForces overwriting index.html"
	echo -e "\t-p, --projvar"
	echo -e "\t\tAppends the raw projvar output to the generated report"
	echo -e "\t-h, --help"
	echo -e "\t\tPrint this usage help and exit"
	echo -e ""
}


# Process command line arguments
while [[ $# -gt 0 ]]
do
	arg="$1"
	shift # $2 -> $1, $3 -> $2, ...

	case "$arg" in
		-C|--repo)
			repo="$1"
			shift
			;;
		-o|--output-html)
			output_html="$1"
			shift
			;;
		--output-md)
			output_md="$1"
			shift
			;;
		--output-json)
			output_json="$1"
			shift
			;;
		-f|--force)
			force=true
			;;
		-p|--projvar)
			echo_projvar=true
			;;
		-h|--help)
			print_help
			exit 0
			;;
		*) # non-/unknown option
			>&2 echo "Unknown flag: '$arg'"
			exit 1
			;;
	esac
done

if ! [ -d "$repo" ]
then
	>&2 echo "ERROR: Not an existing repository: '$repo'"
	exit 1
fi

mkdir -p "$(dirname "$output_md")"
mkdir -p "$(dirname "$output_json")"
mkdir -p "$(dirname "$output_projvar")"
mkdir -p "$(dirname "$output_html")"

# Creates the OSH report as Markdown table
osh \
	-C "$repo" \
	check \
	--force \
	--report-md-table "$output_md" \
	--report-json "$output_json"

# Prettify JSON
jq < "$output_json" > "${output_json}_TMP"
mv "${output_json}_TMP" "$output_json"

jq -r '.stats."openness"' < "$output_json" > OPENNESS.txt
OPENNESS_PERCENT="$(bc <<< "scale=2; $(cat OPENNESS.txt)*100/1")"
OPENNESS_PERCENT_FULL="$(bc <<< "scale=0; $OPENNESS_PERCENT/1")"
echo "$OPENNESS_PERCENT" > OPENNESS_PERCENT.txt

if [ "$OPENNESS_PERCENT_FULL" -gt 90 ]
then
	openness_color=green
elif [ "$OPENNESS_PERCENT_FULL" -gt 50 ]
then
	openness_color=yellow
else
	openness_color=red
fi

rm -f "$badge_file_report" "$badge_file_openness"
wget "https://img.shields.io/badge/OSH-Report-$openness_color" \
	--quiet \
	-O "$badge_file_report"
wget "https://img.shields.io/badge/OSH%20Openness-$OPENNESS_PERCENT%-$openness_color" \
	--quiet \
	-O "$badge_file_openness"

# Adds colors to the report
sed -i \
	-e 's|\[x\]|<font color="green">passed</font>|g' \
	-e 's|\[ \]|<font color="red">failed</font>|g' \
	-e 's|__Severe__|<font color="red">__Severe__</font>|g' \
	-e 's|__Middle__|<font color="orange">__Middle__</font>|g' \
	-e 's|__Light__|<font color="light-blue">__Light__</font>|g' \
	"$output_md"

# Collects project-specific meta-data
# (like project-name and version)
projvar \
	--none \
	--file-out "$output_projvar"
source "$output_projvar"

if [ -z "$title" ]
then
	title="[${PROJECT_NAME:-"Project name N/A"}](${PROJECT_REPO_WEB_URL:-???}) - [OSH](https://en.wikipedia.org/wiki/Open-source_hardware) quality report"
fi
subtitle="Produced by the [\`osh\`-tool](https://gitlab.com/OSEGermany/osh-tool/)"

osh_tool_version="$(osh --version --quiet)"
okh_tool_version="$(okh-tool --version --quiet)"
reuse_tool_version="$(reuse --version | sed -e 's|.* ||')"
projvar_tool_version="$(projvar --version | sed -e 's|.* ||')"

# Prepends meta-data to Markdown report
prefix_file="/tmp/report_gen-prefix-$RANDOM"
tmp_file="/tmp/report_gen-tmp-$RANDOM"
{
	echo "---"
	echo "title: '$title'"
	echo "subtitle: '$subtitle'"
	echo "---"
	echo
	echo "![OSH Report]($(basename "$badge_file_report"))"
	echo "![OSH Report]($(basename "$badge_file_openness"))"
	echo
	echo "## Project meta-data"
	echo
	echo "| | |"
	echo "| --- | -------- |"
	echo "| _version_ | ${PROJECT_VERSION:-"N/A"} |"
	echo "| _version release date_ | ${PROJECT_VERSION_DATE:-"N/A"} |"
	echo "| _branch_ | ${PROJECT_BUILD_BRANCH:-"N/A"} |"
	echo "| _report build date_ | ${PROJECT_BUILD_DATE:-"N/A"} |"
	echo "| _licenses_ | ${PROJECT_LICENSES:-"N/A"} |"
	echo
	echo "## Report tools"
	echo
	echo "| [CLI](https://en.wikipedia.org/wiki/Command-line_interface) tool | version |"
	echo "| --- | -------- |"
	echo "| [\`osh\`](https://gitlab.com/OSEGermany/osh-tool/) | $osh_tool_version |"
	echo "| [\`okh\`](https://github.com/OPEN-NEXT/LOSH-OKH-tool) | $okh_tool_version |"
	echo "| [\`reuse\`](https://github.com/fsfe/reuse-tool/) | $reuse_tool_version |"
	echo "| [\`projvar\`](https://github.com/hoijui/projvar/) | $projvar_tool_version |"
	echo
	echo "## Report"
	echo
} >> "$prefix_file"
cat "$prefix_file" "$output_md" > "$tmp_file"
mv "$tmp_file" "$output_md"
echo "INFO Written Markdown report file '$output_md'."
rm "$prefix_file"

# Appends raw projvar output to Markdown report
if $echo_projvar
then
	{
		echo
		echo "## Project meta-data (by projvar)"
		echo
		echo '```'
		cat "$output_projvar"
		echo '```'
	} >> "$output_md"
fi

# Generates HTML report
pandoc \
	-t html \
	-o "$output_html" \
	--standalone \
	--self-contained \
	--css="$SCRIPT_DIR/report_gen_additional.css" \
	-M document-css=true \
	"$output_md"
echo "INFO Written HTML report file '$output_html'."

# Generate an index.html if none exists yet
index_file="$(dirname "$output_html")/index.html"
if ! [ -f "$index_file" ] || $force
then
	echo '<!DOCTYPE html>
<html>
   <head>
      <title>Redirecting to OSH report ...</title>
      <meta http-equiv="refresh" content="1; url = osh-report.html" />
   </head>
   <body>
      <p>If you are not redirected automatically,
      click on <a href="osh-report.html">osh-report.html</a>.</p>
   </body>
</html>' > "$index_file"
	echo "INFO Written index file '$index_file'."
else
	>&2 printf 'WARN Skipped writing index file "%s",\n     because it already exists and --force was not given.\n' \
		"$index_file"
fi
